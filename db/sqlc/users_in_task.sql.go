// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users_in_task.sql

package sqlc

import (
	"context"
)

const addUserToTask = `-- name: AddUserToTask :one
INSERT INTO usersintask (
    user_id, task_id
) VALUES (
    $1, $2
) RETURNING task_id, user_id, added_at
`

type AddUserToTaskParams struct {
	UserID int32 `json:"user_id"`
	TaskID int32 `json:"task_id"`
}

func (q *Queries) AddUserToTask(ctx context.Context, arg AddUserToTaskParams) (Usersintask, error) {
	row := q.queryRow(ctx, q.addUserToTaskStmt, addUserToTask, arg.UserID, arg.TaskID)
	var i Usersintask
	err := row.Scan(&i.TaskID, &i.UserID, &i.AddedAt)
	return i, err
}

const deleteUserFromTask = `-- name: DeleteUserFromTask :exec
DELETE FROM usersintask
WHERE user_id = $1 AND task_id = $2
`

type DeleteUserFromTaskParams struct {
	UserID int32 `json:"user_id"`
	TaskID int32 `json:"task_id"`
}

func (q *Queries) DeleteUserFromTask(ctx context.Context, arg DeleteUserFromTaskParams) error {
	_, err := q.exec(ctx, q.deleteUserFromTaskStmt, deleteUserFromTask, arg.UserID, arg.TaskID)
	return err
}

const getTaskUsers = `-- name: GetTaskUsers :many
SELECT task_id, user_id, added_at FROM usersintask
WHERE task_id = $1
`

func (q *Queries) GetTaskUsers(ctx context.Context, taskID int32) ([]Usersintask, error) {
	rows, err := q.query(ctx, q.getTaskUsersStmt, getTaskUsers, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usersintask
	for rows.Next() {
		var i Usersintask
		if err := rows.Scan(&i.TaskID, &i.UserID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTasks = `-- name: GetUserTasks :many
SELECT task_id, user_id, added_at FROM usersintask
WHERE user_id = $1
`

func (q *Queries) GetUserTasks(ctx context.Context, userID int32) ([]Usersintask, error) {
	rows, err := q.query(ctx, q.getUserTasksStmt, getUserTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usersintask
	for rows.Next() {
		var i Usersintask
		if err := rows.Scan(&i.TaskID, &i.UserID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
