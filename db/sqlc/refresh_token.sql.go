// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: refresh_token.sql

package sqlc

import (
	"context"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM refresh_token
WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT token, username, fingerprint FROM refresh_token
WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getSessionByTokenStmt, getSessionByToken, token)
	var i RefreshToken
	err := row.Scan(&i.Token, &i.Username, &i.Fingerprint)
	return i, err
}

const getSessionByUsername = `-- name: GetSessionByUsername :one
SELECT token, username, fingerprint FROM refresh_token
WHERE username = $1
`

func (q *Queries) GetSessionByUsername(ctx context.Context, username string) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getSessionByUsernameStmt, getSessionByUsername, username)
	var i RefreshToken
	err := row.Scan(&i.Token, &i.Username, &i.Fingerprint)
	return i, err
}

const setSession = `-- name: SetSession :exec
INSERT INTO refresh_token (
    token, username, fingerprint
) VALUES (
    $1, $2, $3
)
`

type SetSessionParams struct {
	Token       string `json:"token"`
	Username    string `json:"username"`
	Fingerprint string `json:"fingerprint"`
}

func (q *Queries) SetSession(ctx context.Context, arg SetSessionParams) error {
	_, err := q.exec(ctx, q.setSessionStmt, setSession, arg.Token, arg.Username, arg.Fingerprint)
	return err
}
