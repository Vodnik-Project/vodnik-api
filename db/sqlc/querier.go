// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"context"
)

type Querier interface {
	AddUserToProject(ctx context.Context, arg AddUserToProjectParams) (Usersinproject, error)
	AddUserToTask(ctx context.Context, arg AddUserToTaskParams) (Usersintask, error)
	CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error)
	// TODO: auto time for beggining without input doesn't work.
	CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteProject(ctx context.Context, id int32) error
	DeleteTask(ctx context.Context, id int32) error
	DeleteUser(ctx context.Context, id int32) error
	DeleteUserFromProject(ctx context.Context, arg DeleteUserFromProjectParams) error
	DeleteUserFromTask(ctx context.Context, arg DeleteUserFromTaskParams) error
	GetProjectData(ctx context.Context, id int32) (Project, error)
	GetProjectsByUserId(ctx context.Context, ownerID int32) ([]Project, error)
	GetProjectsOfUser(ctx context.Context, userID int32) ([]Usersinproject, error)
	GetTaskData(ctx context.Context, id int32) (Task, error)
	GetTasksInProject(ctx context.Context, projectID int32) ([]Task, error)
	GetTasksOfUser(ctx context.Context, userID int32) ([]Usersintask, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserById(ctx context.Context, id int32) (User, error)
	GetUserByUsername(ctx context.Context, username string) (User, error)
	GetUsersOfProject(ctx context.Context, projectID int32) ([]Usersinproject, error)
	GetUsersOfTask(ctx context.Context, taskID int32) ([]Usersintask, error)
	UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error)
	// TODO: get tasks by filtering: title, tag, created_by, beggining, deadline
	UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
}

var _ Querier = (*Queries)(nil)
