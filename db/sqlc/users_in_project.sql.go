// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users_in_project.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const addUserToProject = `-- name: AddUserToProject :one
INSERT INTO usersinproject (
    user_id, project_id
) VALUES (
    $1, $2
) RETURNING project_id, user_id, added_at
`

type AddUserToProjectParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProjectID uuid.UUID `json:"project_id"`
}

func (q *Queries) AddUserToProject(ctx context.Context, arg AddUserToProjectParams) (Usersinproject, error) {
	row := q.queryRow(ctx, q.addUserToProjectStmt, addUserToProject, arg.UserID, arg.ProjectID)
	var i Usersinproject
	err := row.Scan(&i.ProjectID, &i.UserID, &i.AddedAt)
	return i, err
}

const deleteUserFromProject = `-- name: DeleteUserFromProject :exec
DELETE FROM usersinproject
WHERE user_id = $1 AND project_id = $2
`

type DeleteUserFromProjectParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProjectID uuid.UUID `json:"project_id"`
}

func (q *Queries) DeleteUserFromProject(ctx context.Context, arg DeleteUserFromProjectParams) error {
	_, err := q.exec(ctx, q.deleteUserFromProjectStmt, deleteUserFromProject, arg.UserID, arg.ProjectID)
	return err
}

const getProjectsByUserID = `-- name: GetProjectsByUserID :many
SELECT project_id, user_id, added_at FROM usersinproject
WHERE user_id = $1
`

func (q *Queries) GetProjectsByUserID(ctx context.Context, userID uuid.UUID) ([]Usersinproject, error) {
	rows, err := q.query(ctx, q.getProjectsByUserIDStmt, getProjectsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usersinproject
	for rows.Next() {
		var i Usersinproject
		if err := rows.Scan(&i.ProjectID, &i.UserID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByProjectID = `-- name: GetUsersByProjectID :many
SELECT project_id, user_id, added_at FROM usersinproject
WHERE project_id = $1
`

func (q *Queries) GetUsersByProjectID(ctx context.Context, projectID uuid.UUID) ([]Usersinproject, error) {
	rows, err := q.query(ctx, q.getUsersByProjectIDStmt, getUsersByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usersinproject
	for rows.Next() {
		var i Usersinproject
		if err := rows.Scan(&i.ProjectID, &i.UserID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
