// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addUserToProjectStmt, err = db.PrepareContext(ctx, addUserToProject); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserToProject: %w", err)
	}
	if q.addUserToTaskStmt, err = db.PrepareContext(ctx, addUserToTask); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserToTask: %w", err)
	}
	if q.createProjectStmt, err = db.PrepareContext(ctx, createProject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProject: %w", err)
	}
	if q.createTaskStmt, err = db.PrepareContext(ctx, createTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTask: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteProjectStmt, err = db.PrepareContext(ctx, deleteProject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProject: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.deleteTaskStmt, err = db.PrepareContext(ctx, deleteTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTask: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserFromProjectStmt, err = db.PrepareContext(ctx, deleteUserFromProject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserFromProject: %w", err)
	}
	if q.deleteUserFromTaskStmt, err = db.PrepareContext(ctx, deleteUserFromTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserFromTask: %w", err)
	}
	if q.getProjectDataStmt, err = db.PrepareContext(ctx, getProjectData); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectData: %w", err)
	}
	if q.getProjectsByUserIdStmt, err = db.PrepareContext(ctx, getProjectsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectsByUserId: %w", err)
	}
	if q.getProjectsOfUserStmt, err = db.PrepareContext(ctx, getProjectsOfUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectsOfUser: %w", err)
	}
	if q.getSessionByTokenStmt, err = db.PrepareContext(ctx, getSessionByToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByToken: %w", err)
	}
	if q.getSessionByUsernameStmt, err = db.PrepareContext(ctx, getSessionByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByUsername: %w", err)
	}
	if q.getTaskDataStmt, err = db.PrepareContext(ctx, getTaskData); err != nil {
		return nil, fmt.Errorf("error preparing query GetTaskData: %w", err)
	}
	if q.getTasksInProjectStmt, err = db.PrepareContext(ctx, getTasksInProject); err != nil {
		return nil, fmt.Errorf("error preparing query GetTasksInProject: %w", err)
	}
	if q.getTasksOfUserStmt, err = db.PrepareContext(ctx, getTasksOfUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetTasksOfUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersOfProjectStmt, err = db.PrepareContext(ctx, getUsersOfProject); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersOfProject: %w", err)
	}
	if q.getUsersOfTaskStmt, err = db.PrepareContext(ctx, getUsersOfTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersOfTask: %w", err)
	}
	if q.setSessionStmt, err = db.PrepareContext(ctx, setSession); err != nil {
		return nil, fmt.Errorf("error preparing query SetSession: %w", err)
	}
	if q.updateProjectStmt, err = db.PrepareContext(ctx, updateProject); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProject: %w", err)
	}
	if q.updateTaskStmt, err = db.PrepareContext(ctx, updateTask); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTask: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addUserToProjectStmt != nil {
		if cerr := q.addUserToProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserToProjectStmt: %w", cerr)
		}
	}
	if q.addUserToTaskStmt != nil {
		if cerr := q.addUserToTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserToTaskStmt: %w", cerr)
		}
	}
	if q.createProjectStmt != nil {
		if cerr := q.createProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProjectStmt: %w", cerr)
		}
	}
	if q.createTaskStmt != nil {
		if cerr := q.createTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteProjectStmt != nil {
		if cerr := q.deleteProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.deleteTaskStmt != nil {
		if cerr := q.deleteTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserFromProjectStmt != nil {
		if cerr := q.deleteUserFromProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserFromProjectStmt: %w", cerr)
		}
	}
	if q.deleteUserFromTaskStmt != nil {
		if cerr := q.deleteUserFromTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserFromTaskStmt: %w", cerr)
		}
	}
	if q.getProjectDataStmt != nil {
		if cerr := q.getProjectDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectDataStmt: %w", cerr)
		}
	}
	if q.getProjectsByUserIdStmt != nil {
		if cerr := q.getProjectsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectsByUserIdStmt: %w", cerr)
		}
	}
	if q.getProjectsOfUserStmt != nil {
		if cerr := q.getProjectsOfUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectsOfUserStmt: %w", cerr)
		}
	}
	if q.getSessionByTokenStmt != nil {
		if cerr := q.getSessionByTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByTokenStmt: %w", cerr)
		}
	}
	if q.getSessionByUsernameStmt != nil {
		if cerr := q.getSessionByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByUsernameStmt: %w", cerr)
		}
	}
	if q.getTaskDataStmt != nil {
		if cerr := q.getTaskDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTaskDataStmt: %w", cerr)
		}
	}
	if q.getTasksInProjectStmt != nil {
		if cerr := q.getTasksInProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTasksInProjectStmt: %w", cerr)
		}
	}
	if q.getTasksOfUserStmt != nil {
		if cerr := q.getTasksOfUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTasksOfUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersOfProjectStmt != nil {
		if cerr := q.getUsersOfProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersOfProjectStmt: %w", cerr)
		}
	}
	if q.getUsersOfTaskStmt != nil {
		if cerr := q.getUsersOfTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersOfTaskStmt: %w", cerr)
		}
	}
	if q.setSessionStmt != nil {
		if cerr := q.setSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setSessionStmt: %w", cerr)
		}
	}
	if q.updateProjectStmt != nil {
		if cerr := q.updateProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProjectStmt: %w", cerr)
		}
	}
	if q.updateTaskStmt != nil {
		if cerr := q.updateTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTaskStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	addUserToProjectStmt      *sql.Stmt
	addUserToTaskStmt         *sql.Stmt
	createProjectStmt         *sql.Stmt
	createTaskStmt            *sql.Stmt
	createUserStmt            *sql.Stmt
	deleteProjectStmt         *sql.Stmt
	deleteSessionStmt         *sql.Stmt
	deleteTaskStmt            *sql.Stmt
	deleteUserStmt            *sql.Stmt
	deleteUserFromProjectStmt *sql.Stmt
	deleteUserFromTaskStmt    *sql.Stmt
	getProjectDataStmt        *sql.Stmt
	getProjectsByUserIdStmt   *sql.Stmt
	getProjectsOfUserStmt     *sql.Stmt
	getSessionByTokenStmt     *sql.Stmt
	getSessionByUsernameStmt  *sql.Stmt
	getTaskDataStmt           *sql.Stmt
	getTasksInProjectStmt     *sql.Stmt
	getTasksOfUserStmt        *sql.Stmt
	getUserByEmailStmt        *sql.Stmt
	getUserByIdStmt           *sql.Stmt
	getUserByUsernameStmt     *sql.Stmt
	getUsersOfProjectStmt     *sql.Stmt
	getUsersOfTaskStmt        *sql.Stmt
	setSessionStmt            *sql.Stmt
	updateProjectStmt         *sql.Stmt
	updateTaskStmt            *sql.Stmt
	updateUserStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		addUserToProjectStmt:      q.addUserToProjectStmt,
		addUserToTaskStmt:         q.addUserToTaskStmt,
		createProjectStmt:         q.createProjectStmt,
		createTaskStmt:            q.createTaskStmt,
		createUserStmt:            q.createUserStmt,
		deleteProjectStmt:         q.deleteProjectStmt,
		deleteSessionStmt:         q.deleteSessionStmt,
		deleteTaskStmt:            q.deleteTaskStmt,
		deleteUserStmt:            q.deleteUserStmt,
		deleteUserFromProjectStmt: q.deleteUserFromProjectStmt,
		deleteUserFromTaskStmt:    q.deleteUserFromTaskStmt,
		getProjectDataStmt:        q.getProjectDataStmt,
		getProjectsByUserIdStmt:   q.getProjectsByUserIdStmt,
		getProjectsOfUserStmt:     q.getProjectsOfUserStmt,
		getSessionByTokenStmt:     q.getSessionByTokenStmt,
		getSessionByUsernameStmt:  q.getSessionByUsernameStmt,
		getTaskDataStmt:           q.getTaskDataStmt,
		getTasksInProjectStmt:     q.getTasksInProjectStmt,
		getTasksOfUserStmt:        q.getTasksOfUserStmt,
		getUserByEmailStmt:        q.getUserByEmailStmt,
		getUserByIdStmt:           q.getUserByIdStmt,
		getUserByUsernameStmt:     q.getUserByUsernameStmt,
		getUsersOfProjectStmt:     q.getUsersOfProjectStmt,
		getUsersOfTaskStmt:        q.getUsersOfTaskStmt,
		setSessionStmt:            q.setSessionStmt,
		updateProjectStmt:         q.updateProjectStmt,
		updateTaskStmt:            q.updateTaskStmt,
		updateUserStmt:            q.updateUserStmt,
	}
}
