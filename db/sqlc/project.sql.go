// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: project.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    title, info, owner_id
) VALUES (
    $1, $2, $3
)
RETURNING id, title, info, owner_id, created_at
`

type CreateProjectParams struct {
	Title   string         `json:"title"`
	Info    sql.NullString `json:"info"`
	OwnerID int32          `json:"owner_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.createProjectStmt, createProject, arg.Title, arg.Info, arg.OwnerID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteProjectStmt, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, title, info, owner_id, created_at FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.queryRow(ctx, q.getProjectStmt, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, title, info, owner_id, created_at FROM projects
WHERE owner_id = $1
`

func (q *Queries) GetProjects(ctx context.Context, ownerID int32) ([]Project, error) {
	rows, err := q.query(ctx, q.getProjectsStmt, getProjects, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Info,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects SET
  title = COALESCE(NULLIF($1, 'NULL'), title),
  info = COALESCE(NULLIF($2, 'NULL'), info)
WHERE id = $3
RETURNING id, title, info, owner_id, created_at
`

type UpdateProjectParams struct {
	Title interface{} `json:"title"`
	Info  interface{} `json:"info"`
	ID    int32       `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.updateProjectStmt, updateProject, arg.Title, arg.Info, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}
