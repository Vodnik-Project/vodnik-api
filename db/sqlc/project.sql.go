// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: project.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    title, info, owner_id
) VALUES (
  $1, $2, $3
)
RETURNING project_id, title, info, owner_id, created_at
`

type CreateProjectParams struct {
	Title   string         `json:"title"`
	Info    sql.NullString `json:"info"`
	OwnerID uuid.UUID      `json:"owner_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.createProjectStmt, createProject, arg.Title, arg.Info, arg.OwnerID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, projectID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProjectStmt, deleteProject, projectID)
	return err
}

const getProjectData = `-- name: GetProjectData :one
SELECT project_id, title, info, owner_id, created_at FROM projects
WHERE project_id = $1
`

func (q *Queries) GetProjectData(ctx context.Context, projectID uuid.UUID) (Project, error) {
	row := q.queryRow(ctx, q.getProjectDataStmt, getProjectData, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getProjectsByUserId = `-- name: GetProjectsByUserId :many
SELECT project_id, title, info, owner_id, created_at FROM projects
WHERE owner_id = $1
`

func (q *Queries) GetProjectsByUserId(ctx context.Context, ownerID uuid.UUID) ([]Project, error) {
	rows, err := q.query(ctx, q.getProjectsByUserIdStmt, getProjectsByUserId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Title,
			&i.Info,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects SET
  title = COALESCE(NULLIF($1, 'NULL'), title),
  info = COALESCE(NULLIF($2, 'NULL'), info)
WHERE project_id = $3
RETURNING project_id, title, info, owner_id, created_at
`

type UpdateProjectParams struct {
	Title     interface{} `json:"title"`
	Info      interface{} `json:"info"`
	ProjectID uuid.UUID   `json:"project_id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.updateProjectStmt, updateProject, arg.Title, arg.Info, arg.ProjectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}
