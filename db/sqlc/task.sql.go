// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: task.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    project_id, title, info, tag, created_by, beggining, deadline, color
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, project_id, title, info, tag, created_by, created_at, beggining, deadline, color
`

type CreateTaskParams struct {
	ProjectID int32        `json:"project_id"`
	Title     string       `json:"title"`
	Info      string       `json:"info"`
	Tag       string       `json:"tag"`
	CreatedBy int32        `json:"created_by"`
	Beggining sql.NullTime `json:"beggining"`
	Deadline  sql.NullTime `json:"deadline"`
	Color     string       `json:"color"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.createTaskStmt, createTask,
		arg.ProjectID,
		arg.Title,
		arg.Info,
		arg.Tag,
		arg.CreatedBy,
		arg.Beggining,
		arg.Deadline,
		arg.Color,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.Tag,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Beggining,
		&i.Deadline,
		&i.Color,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteTaskStmt, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, project_id, title, info, tag, created_by, created_at, beggining, deadline, color FROM tasks
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.queryRow(ctx, q.getTaskStmt, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.Tag,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Beggining,
		&i.Deadline,
		&i.Color,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, project_id, title, info, tag, created_by, created_at, beggining, deadline, color FROM tasks
WHERE project_id = $1
`

func (q *Queries) GetTasks(ctx context.Context, projectID int32) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksStmt, getTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Info,
			&i.Tag,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.Beggining,
			&i.Deadline,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one

UPDATE tasks SET
  title =     COALESCE(NULLIF($1, 'NULL'), title),
  info =      COALESCE(NULLIF($2, 'NULL'), info),
  tag =       COALESCE(NULLIF($3, 'NULL'), tag),
  beggining = COALESCE($4, beggining),
  deadline =  COALESCE($5, deadline),
  color =     COALESCE(NULLIF($6, 'NULL'), color)
WHERE id = $7
RETURNING id, project_id, title, info, tag, created_by, created_at, beggining, deadline, color
`

type UpdateTaskParams struct {
	Title     interface{}  `json:"title"`
	Info      interface{}  `json:"info"`
	Tag       interface{}  `json:"tag"`
	Beggining sql.NullTime `json:"beggining"`
	Deadline  sql.NullTime `json:"deadline"`
	Color     interface{}  `json:"color"`
	ID        int32        `json:"id"`
}

// TODO: get tasks by filtering: title, tag, created_by, beggining, deadline
func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.updateTaskStmt, updateTask,
		arg.Title,
		arg.Info,
		arg.Tag,
		arg.Beggining,
		arg.Deadline,
		arg.Color,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Info,
		&i.Tag,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Beggining,
		&i.Deadline,
		&i.Color,
	)
	return i, err
}
