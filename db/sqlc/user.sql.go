// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, pass_hash, bio
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, email, pass_hash, join_date, bio, profile_photo
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	PassHash string `json:"pass_hash"`
	Bio      string `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Email,
		arg.PassHash,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PassHash,
		&i.JoinDate,
		&i.Bio,
		&i.ProfilePhoto,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, pass_hash, join_date, bio, profile_photo FROM users
WHERE (id = COALESCE($1 , id)
  OR  email = COALESCE($2, email))
`

type GetUserParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PassHash,
		&i.JoinDate,
		&i.Bio,
		&i.ProfilePhoto,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
  username = COALESCE(NULLIF($1, 'NULL'), username),
  email = COALESCE(NULLIF($2, 'NULL'), email),
  bio = COALESCE(NULLIF($3, 'NULL'), bio)
WHERE id = $4
RETURNING id, username, email, pass_hash, join_date, bio, profile_photo
`

type UpdateUserParams struct {
	Username interface{} `json:"username"`
	Email    interface{} `json:"email"`
	Bio      interface{} `json:"bio"`
	ID       int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.Bio,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PassHash,
		&i.JoinDate,
		&i.Bio,
		&i.ProfilePhoto,
	)
	return i, err
}
